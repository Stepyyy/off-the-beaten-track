{"version":3,"sources":["location.png","background.jpeg","camping.jpeg","skatepark.jpeg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","helloworldfunction","bind","locationInput","React","createRef","distanceInput","e","preventDefault","console","log","this","current","value","className","Item","src","homeImg","rounded","Caption","camping","skatepark","xs","Group","controlId","Label","Control","type","placeholder","ref","variant","onClick","window","open","map","style","height","width","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,kYCwG5BC,E,YAxFb,WAAYC,GACX,IAAD,8BACE,4CAAMA,KACDC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,cAAgBC,IAAMC,YAC3B,EAAKC,cAAgBF,IAAMC,YAJ7B,E,gFAOmBE,GACjBA,EAAEC,iBACFC,QAAQC,IAAIC,KAAKR,cAAcS,QAAQC,OACvCJ,QAAQC,IAAIC,KAAKL,cAAcM,QAAQC,OACvCF,KAAKR,cAAcS,QAAQC,MAAQ,GACnCF,KAAKL,cAAcM,QAAQC,MAAQ,K,+BAG3B,IAAD,OACP,OACE,kBAAC,IAAD,CAAKC,UAAU,cACf,kBAAC,IAAD,KACJ,kBAAC,IAASC,KAAV,KACE,yBACED,UAAU,gBACVE,IAAKC,IAASC,SAAO,IAGvB,kBAAC,IAASC,QAAV,KACE,oDACA,2DAGJ,kBAAC,IAASJ,KAAV,KACE,yBACED,UAAU,gBACVE,IAAKI,IAASF,SAAO,IAGvB,kBAAC,IAASC,QAAV,KACE,wCACA,0DAGJ,kBAAC,IAASJ,KAAV,KACE,yBACED,UAAU,gBACVE,IAAKK,IAAWH,SAAO,IAGzB,kBAAC,IAASC,QAAV,KACE,0CACA,gEAKA,6BAEA,kBAAC,IAAD,CAAKG,GAAI,GACP,kBAAC,IAAD,KACE,kBAAC,IAAKC,MAAN,CAAYC,UAAU,mBACpB,kBAAC,IAAKC,MAAN,6BACA,kBAAC,IAAKC,QAAN,CAAcC,KAAK,OAAOC,YAAY,yBAAyBC,IAAKlB,KAAKR,iBAG3E,kBAAC,IAAKoB,MAAN,CAAYC,UAAU,qBACpB,kBAAC,IAAKC,MAAN,+BACA,kBAAC,IAAKC,QAAN,CAAcC,KAAK,OAAOC,YAAY,QAAQC,IAAKlB,KAAKL,iBAGxD,kBAAC,IAAD,CAAQwB,QAAQ,UAAUH,KAAK,SAASI,QAAS,SAAAxB,GAC/CyB,OAAOC,KAAP,gGAAqG,EAAK3B,cAAcM,QAAQC,OAAS,YAD3I,WAOJ,8BAGF,kBAAC,IAAD,CAAKS,GAAI,GACP,kBAAC,IAAD,CAAON,IAAOkB,IAAKC,MAAO,CAACC,OAAQ,IAAKC,MAAM,KAAMnB,SAAO,U,GAlFjDd,IAAMkC,WCFJC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.dc98a9d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/location.edfaa45d.png\";","module.exports = __webpack_public_path__ + \"static/media/background.1838055c.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/camping.b0061264.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/skatepark.c8ffc1b4.jpeg\";","import React from 'react';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Image from 'react-bootstrap/Image';\nimport map from './location.png';\nimport homeImg from './background.jpeg';\nimport Carousel from 'react-bootstrap/Carousel';\nimport camping from './camping.jpeg';\nimport skatepark from './skatepark.jpeg';\n\n\nclass App extends React.Component {\n\n  constructor(props)\n  { \n    super(props);\n    this.helloworldfunction = this.helloworldfunction.bind(this);\n    this.locationInput = React.createRef();\n    this.distanceInput = React.createRef();\n  }\n\n  helloworldfunction(e) {\n    e.preventDefault();\n    console.log(this.locationInput.current.value);\n    console.log(this.distanceInput.current.value);\n    this.locationInput.current.value = \"\";\n    this.distanceInput.current.value = \"\";\n  }\n\n  render() {\n    return (\n      <Row className=\"App-header\">\n      <Carousel >\n  <Carousel.Item>\n    <img\n      className=\"d-block w-100\"\n      src={homeImg} rounded\n      // style=\"height = 100%; max-height = 400px\"\n      />\n    <Carousel.Caption>\n      <h3>OFF THE BEATEN TRACK</h3>\n      <p>Find your passion with us.</p>\n    </Carousel.Caption>\n  </Carousel.Item>\n  <Carousel.Item>\n    <img\n      className=\"d-block w-100\"\n      src={camping} rounded\n      // style=\"height = 100%; max-height = 400px\"\n      />\n    <Carousel.Caption>\n      <h3>GLAMPING</h3>\n      <p>Just for the extra spicy.</p>\n    </Carousel.Caption>\n  </Carousel.Item>\n  <Carousel.Item>\n    <img\n      className=\"d-block w-100\"\n      src={skatepark} rounded\n      // style=\"height = 100%; max-height = 400px\"\n      />\n    <Carousel.Caption>\n      <h3>SKATE LIFE</h3>\n      <p>For those vertically inclined.</p>\n    </Carousel.Caption>\n  </Carousel.Item>\n</Carousel>\n      \n      <br></br>\n      \n      <Col xs={4} >\n        <Form>\n          <Form.Group controlId=\"location_search\">\n            <Form.Label>Destination/Location</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"Enter destination here\" ref={this.locationInput}/>\n          </Form.Group>\n\n          <Form.Group controlId=\"formBasicPassword\">\n            <Form.Label>Parks within distance:</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"20 km\" ref={this.distanceInput}/>\n          </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\" onClick={e => {\n              window.open(`https://immense-ocean-43467.herokuapp.com/unicorn?lat=-36.865471&long=174.789798&dist=${this.distanceInput.current.value}`, \"_blank\")\n            }}>\n              Submit\n            </Button>\n        </Form>\n\n        <br></br>\n        \n      </Col>\n      <Col xs={4}>\n        <Image src = {map} style={{height: 300, width:500}} rounded/>\n      </Col>\n    </Row>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}